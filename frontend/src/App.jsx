import { useState } from 'react';

function App() {
    // States to hold the code from the textarea, documentation generated by the API and loading status
    const [code, setCode] = useState('');
    const [documentation, setDocumentation] = useState('');
    const [isLoading, setIsLoading] = useState(false);

    // Make the function async to use await
    const handleSubmit = async () => {
        // Set loading state and clear previous documentation
        setIsLoading(true);
        setDocumentation('');

        try {
            const response = await fetch('http://localhost:5001/api/document', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ code }),
            });

            // Check if the request was not successful
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Something went wrong');
            }

            const data = await response.json();
            setDocumentation(data.documentation);

        } catch (error) {
            console.error('Failed to fetch documentation:', error);
            setDocumentation(`Error: ${error.message}`);
        } finally {
            // Reset loading state regardless of success or failure
            setIsLoading(false);
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Tab') {
            e.preventDefault();

            // Use the browser's built-in 'insertText' command
            // This is treated as a native user action and is undoable.
            document.execCommand('insertText', false, '    '); // Inserts 4 spaces
        }
    };

    return (
        <div className="app-container">
            <h1>AI Code Documentation Generator</h1>
            <p>Paste your function in any language below and get instant documentation.</p>

            <textarea
                value={code}
                onChange={(e) => setCode(e.target.value)}
                onKeyDown={handleKeyDown}
                placeholder="e.g., function greet(name) { return `Hello, ${name}!`; }"
            />

            <button onClick={handleSubmit} disabled={isLoading || !code}>
                {isLoading ? 'Generating...' : 'Generate Documentation'}
            </button>

            {isLoading && <p className="loading-text">The AI is thinking...</p>}

            {documentation && (
                <div className="documentation-display">
                    <h2>Generated Documentation:</h2>
                    <pre>
            <code>{documentation}</code>
          </pre>
                </div>
            )}
        </div>
    );
}

export default App;